# 코드 실행 전 확인 사항
- Local과 Colab의 데이터 구조는 아래와 같이 되어 있어야 코드가 돌아갈 수 있음
- Local 꼬리표가 붙은 코드의 디렉터리 구조
   - Desktop
      - ETRI (Emo-Ensemble, KEMDy20_v1_1, AI_Hub 폴더는 같은 경로상에 있어야 함)
         - Emo-Ensemble (ETRI 폴더에서 git clone을 수행하면 자동으로 생성됨) 
            - code (Local 코드의 path는 여기서 시작)
               - try (모델 성능 재현 시 사용하지 않는 코드)
         - KEMDy20_v1_1 (KEMDy20 데이터셋)
            - annotation
               - Sess01_eval.csv
               - ...
               - Sess40_eval.csv
            - EDA
            - IBI
            - TEMP
            - wav
               - Session03
               - ...
               - Session40
         - AI_Hub (AI Hub의 감정 분류를 위한 대화 음성 데이터셋 - 5차년도(2차)만 사용)
            - annotation
               - 5차년도_2차.csv
            - wav
               - 5f3c9ed98a3c1005aa97c4bd.wav
               - ...
               - 5fbe364744697678c497c07f.wav
- Colab 꼬리표가 붙은 코드의 디렉터리 구조 (Colab 환경에서)
   - content
      - drive
         - MyDrive
            - KEMD (KEMD 폴더와 data, code는 직접 생성해줘야 함)
               - data (3으로 생성된 Train, Test text 파일을 이 위치에 넣어주어야 함)
                  - Train.csv
                  - Test.csv
               - code (5와 6코드는 이 위치에 넣어주어야 함, Colab 코드의 path는 여기서 시작)
                  - 5. Emotion Recognition with KoBERT (Colab).ipynb
                  - 6. Emotion Recognition with wav2vec2 (Colab).ipynb

1. Annotation preprocessing & Data split (Local)
- 설명: wav file path와 annotation 정보를 결합
- 결과: Splitting 폴더안에 Train_Origin, Test_Origin, Train, Test 파일(csv) 생성
- Train_Origin, Test_Origin: KEMDy20 데이터만 포함된 파일
- Train, Test: KEMDy20과 AI Hub가 결합된 파일

2. Confirm class distribution (Local)
- 설명: 클래스 분포를 확인 (데이터 결합 전과 후)
- 결과: Class_distribution_origin, Class_distribution_add 파일(png) 생성
- Class_distribution_origin: KEMDy20 데이터의 클래스 분포
- Class_distribution_add: KEMDy20 + AI Hub 데이터의 클래스 분포

3. Text preprocessing (Local)
- 설명: text와 annotation 정보를 결합
- 결과: Text 폴더안에 Train_Origin, Test_Origin, Train, Test 파일(csv) 생성
- Train_Origin, Test_Origin: KEMDy20 데이터만 포함된 파일
- Train, Test: KEMDy20과 AI Hub가 결합된 파일

4. Save SER dataset (Local)
- 설명: 1로 생성된 wav file path에 존재하는 wav file의 feature를 wav2vec2로 추출하여 저장
- 결과: Dataset 폴더안에 train_dataset, test_dataset 폴더 생성
- 결과2: train_dataset과 test_dataset이 압축된 Dataset 파일(zip) 생성
- train_dataset, test_dataset: 폴더 내부에 huggingface 형식으로 압축된 파일이 존재
- Dataset: 구글 드라이브에 저장하기 위한 압축 파일 (Colab에서 사용하기 위함)

5. Emotion Recognition with KoBERT (Colab)
- 설명: 3으로 생성된 text 파일을 KoBERT를 이용하여 감정 분류
- 결과: model 폴더안에 학습된 KoBERT 모델 저장, pred 폴더안에 test 예측 값 저장
- dr_rate를 0.3, 0.5, 0.7로 변경하여 모델과 pred 값을 각각 저장해야함
- kobert_trained_03, kobert_state_dict_03, kobert_emotions_all_03: dr_rate를 0.3으로하여 학습된 KoBERT 모델
- KoBERT_03: dr_rate를 0.3으로하여 학습된 KoBERT 모델로 예측된 test 예측 값 파일 (npz)
- KoBERT는 종속성 문제 때문에 Local에서 구현이 매우 힘드므로 꼭 Colab을 이용해야함

6. Emotion Recognition with wav2vec2 (Colab)
- 설명: 4로 생성된 Dataset을 wav2vec2를 이용하여 감정 분류
- 결과: model/wav2vec2_trained 폴더안에 학습된 모델 저장, pred 폴더안에 test 예측 값 저장
- wav2vec2_trained: 순방향 wav로 학습된 wav2vec2 모델
- wav2vec2: 순방향 wav로 학습된 모델로 예측된 test 예측 값 파일 (npz)

7. Emotion Recognition with wav2vec2 (Local)
- 설명: 1로 생성된 wav file path에 존재하는 wav file의 feature를 wav2vec2로 추출하고 감정 분류 (역방향)
- 결과: model/wav2vec2_R_trained 폴더안에 학습된 모델 저장, pred 폴더안에 test 예측 값 저장
- wav2vec2_R_trained: 역방향 wav로 학습된 wav2vec2 모델
- wav2vec2_R: 역방향 wav로 학습된 모델로 예측된 test 예측 값 파일 (npz)

8. Ensemble prediction (Local)
- 설명: 5, 6, 7로 생성된 pred 값에 대해 앙상블을 수행
- 결과: 각 모델별 예측 결과와 앙상블 예측 결과가 classification_report 형식으로 출력됨
- 예측 값 파일(npz)이 KEMDy20_v1_1/pred에 존재해야함 (pred 폴더는 7을 통해 생성됨)